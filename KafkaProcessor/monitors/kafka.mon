using com.softwareag.connectivity.ConnectivityPlugins;

// Create the Event we are interested in. 
@com.softwareag.connectivity.ExtraFieldsDict("tweet_data")
event TwitterEvent {
	string text;
	boolean retweeted;
	boolean is_quote_status;
    dictionary<any,any> tweet_data;
}

//The summary event we are publishing every 50 tweets
event TwitterSummary {
	integer tweet_count;
	dictionary < string , string > wordcounts;
}

monitor Receiver {
	//Channels for I/O
	constant string KAFKA_INPUT_CHANNEL := "kafka:tweets";
	constant string KAFKA_OUTPUT_CHANNEL := "kafka:summary";

	//simple list of common >3 letter words to ignore. 
	constant string ignore_words := "that they this than it's &amp; about again want were when with wont your there their these some";

	//store details while we process - dictionary for word frequencies
	integer total_tweets;
	dictionary < string , integer > wordcounts;
	dictionary < string , string > summary_frequencies;

	//Just process messages when we load up. 
	action onload() {

		monitor.subscribe(KAFKA_INPUT_CHANNEL);		
		on all TwitterEvent() as e {			
			total_tweets := total_tweets + 1;
			// now we can store the words for later 
			e.text := e.text.toLower().ltrim().rtrim();
			e.text := e.text.replace("(!gi)[^A-Za-z0-9\\s]","");
			//e.text := e.text.replaceAll("(","").replaceAll(")","").replaceAll("\"","").replaceAll(",","").replaceAll("'","");
			//want to avoid empty string so tokenize rather than split
			sequence<string> tweet_words := " \n\t".tokenize(e.text);
			string word;
			for word in tweet_words {
				//ignore user and links  and words < 3 characters
				if ( word.length() > 3 and word.find("@") = -1 and word.find("http") = -1 and ignore_words.find(word) = -1 ) {
					if wordcounts.hasKey(word) {
						wordcounts[word] := wordcounts[word] + 1;
					} else {
						wordcounts.add( word , 1 );
					}
				}
			}

			//periodically send summary - every 10 tweets received
			if ( total_tweets % 10 = 0) {
				summary_frequencies.clear();
				string key; 
				for key in wordcounts.keys() {
					//add if word is on more than 5% of tweets
					if( (wordcounts[key].toFloat() / total_tweets.toFloat() ) > 0.05 )
					{
						//I wanted an easy to read format in the output so I convert to strings
						//not something I would neccesarily do in a real application
						summary_frequencies[key] := (wordcounts[key].toFloat()/ total_tweets.toFloat()).formatFixed(2);
					}
				}
				TwitterSummary summary := TwitterSummary( total_tweets , summary_frequencies );
				send summary to KAFKA_OUTPUT_CHANNEL;
			}
		}

	}
}