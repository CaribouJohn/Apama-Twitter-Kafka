using com.softwareag.connectivity.ConnectivityPlugins;


@com.softwareag.connectivity.ExtraFieldsDict("tweet_data")
event TwitterEvent {
	string text;
	string source;
	optional<string> in_reply_to_screen_name;
	boolean retweeted;
	boolean is_quote_status;
	any user;
    dictionary<any,any> tweet_data;
}




monitor Receiver {
	//define input and output channels - the prefix is the default 
	constant string KAFKA_INPUT_CHANNEL := "kafka:tweets";
	constant string KAFKA_OUTPUT_CHANNEL := "kafka:summary";

	//Some words to definitely ignore 
	constant string ignore_words := "that they this than it's &amp; about again want were when with wont your there their these some";

	//the total number of tweets seen
	integer total_tweet_count;
	//Structure for the word frequency
	dictionary < string , integer > wordcounts;

	action onload() {
		monitor.subscribe(KAFKA_CHANNEL);
		
		on all TwitterEvent() as e {			
			//lets clean up the tweet - much more could be done here and 
			e.text := e.text.replaceAll("(","").replaceAll(")","").replaceAll("\"","").replaceAll(",","").replaceAll("'","");
			e.text := e.text.toLower().ltrim().rtrim();
			sequence<string> tweet_words := " \n\t".tokenize(e.text);

			// now we can store the words in our dictionary for output later 
			string word;
			for word in tweet_words {
				if ( word.length() > 3 and word.find("@") = -1 and word.find("http") = -1 and ignore_words.find(word) = -1 ) {
					if wordcounts.hasKey(word) {
						wordcounts[word] := wordcounts[word] + 1;
					} else {
						wordcounts.add( word , 1 );
					}
				}
			}

			// Here we output 
			string key;
			log "---------" at INFO;
			for key in wordcounts.keys() {
				if( wordcounts[key] > 10 ) {
					log key + " : " + wordcounts[key].toString() at INFO;
				}
			}
		}

	}
}